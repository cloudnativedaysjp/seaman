// Code generated by MockGen. DO NOT EDIT.
// Source: slack.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	slack "github.com/slack-go/slack"
)

// MockSlackClient is a mock of SlackClient interface.
type MockSlackClient struct {
	ctrl     *gomock.Controller
	recorder *MockSlackClientMockRecorder
}

// MockSlackClientMockRecorder is the mock recorder for MockSlackClient.
type MockSlackClientMockRecorder struct {
	mock *MockSlackClient
}

// NewMockSlackClient creates a new mock instance.
func NewMockSlackClient(ctrl *gomock.Controller) *MockSlackClient {
	mock := &MockSlackClient{ctrl: ctrl}
	mock.recorder = &MockSlackClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlackClient) EXPECT() *MockSlackClientMockRecorder {
	return m.recorder
}

// PostMessage mocks base method.
func (m *MockSlackClient) PostMessage(ctx context.Context, channel string, msg slack.Msg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostMessage", ctx, channel, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostMessage indicates an expected call of PostMessage.
func (mr *MockSlackClientMockRecorder) PostMessage(ctx, channel, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMessage", reflect.TypeOf((*MockSlackClient)(nil).PostMessage), ctx, channel, msg)
}

// PostMessageToThread mocks base method.
func (m *MockSlackClient) PostMessageToThread(ctx context.Context, channel, ts string, msg slack.Msg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostMessageToThread", ctx, channel, ts, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostMessageToThread indicates an expected call of PostMessageToThread.
func (mr *MockSlackClientMockRecorder) PostMessageToThread(ctx, channel, ts, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMessageToThread", reflect.TypeOf((*MockSlackClient)(nil).PostMessageToThread), ctx, channel, ts, msg)
}

// UpdateMessage mocks base method.
func (m *MockSlackClient) UpdateMessage(ctx context.Context, channel, ts string, msg slack.Msg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessage", ctx, channel, ts, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMessage indicates an expected call of UpdateMessage.
func (mr *MockSlackClientMockRecorder) UpdateMessage(ctx, channel, ts, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessage", reflect.TypeOf((*MockSlackClient)(nil).UpdateMessage), ctx, channel, ts, msg)
}
