// Code generated by MockGen. DO NOT EDIT.
// Source: gitcommand.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gitcommand "github.com/cloudnativedaysjp/seaman/internal/infra/gitcommand"
	gomock "github.com/golang/mock/gomock"
)

// MockGitCommandClient is a mock of GitCommandClient interface.
type MockGitCommandClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitCommandClientMockRecorder
}

// MockGitCommandClientMockRecorder is the mock recorder for MockGitCommandClient.
type MockGitCommandClientMockRecorder struct {
	mock *MockGitCommandClient
}

// NewMockGitCommandClient creates a new mock instance.
func NewMockGitCommandClient(ctrl *gomock.Controller) *MockGitCommandClient {
	mock := &MockGitCommandClient{ctrl: ctrl}
	mock.recorder = &MockGitCommandClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitCommandClient) EXPECT() *MockGitCommandClientMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockGitCommandClient) Clone(ctx context.Context, org, repo string, opt gitcommand.CloneOpt) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", ctx, org, repo, opt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clone indicates an expected call of Clone.
func (mr *MockGitCommandClientMockRecorder) Clone(ctx, org, repo, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockGitCommandClient)(nil).Clone), ctx, org, repo, opt)
}

// CommitAll mocks base method.
func (m *MockGitCommandClient) CommitAll(ctx context.Context, dirPath, commitMsg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitAll", ctx, dirPath, commitMsg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitAll indicates an expected call of CommitAll.
func (mr *MockGitCommandClientMockRecorder) CommitAll(ctx, dirPath, commitMsg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitAll", reflect.TypeOf((*MockGitCommandClient)(nil).CommitAll), ctx, dirPath, commitMsg)
}

// CommitAllAmend mocks base method.
func (m *MockGitCommandClient) CommitAllAmend(ctx context.Context, dirPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitAllAmend", ctx, dirPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitAllAmend indicates an expected call of CommitAllAmend.
func (mr *MockGitCommandClientMockRecorder) CommitAllAmend(ctx, dirPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitAllAmend", reflect.TypeOf((*MockGitCommandClient)(nil).CommitAllAmend), ctx, dirPath)
}

// HealthCheck mocks base method.
func (m *MockGitCommandClient) HealthCheck() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockGitCommandClientMockRecorder) HealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockGitCommandClient)(nil).HealthCheck))
}

// Push mocks base method.
func (m *MockGitCommandClient) Push(ctx context.Context, dirPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", ctx, dirPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockGitCommandClientMockRecorder) Push(ctx, dirPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockGitCommandClient)(nil).Push), ctx, dirPath)
}

// Remove mocks base method.
func (m *MockGitCommandClient) Remove(ctx context.Context, dirPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, dirPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockGitCommandClientMockRecorder) Remove(ctx, dirPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockGitCommandClient)(nil).Remove), ctx, dirPath)
}

// Restore mocks base method.
func (m *MockGitCommandClient) Restore(ctx context.Context, dirPath, sourceBranch string, filePaths []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", ctx, dirPath, sourceBranch, filePaths)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore.
func (mr *MockGitCommandClientMockRecorder) Restore(ctx, dirPath, sourceBranch, filePaths any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockGitCommandClient)(nil).Restore), ctx, dirPath, sourceBranch, filePaths)
}

// SwitchNewBranch mocks base method.
func (m *MockGitCommandClient) SwitchNewBranch(ctx context.Context, dirPath, branch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwitchNewBranch", ctx, dirPath, branch)
	ret0, _ := ret[0].(error)
	return ret0
}

// SwitchNewBranch indicates an expected call of SwitchNewBranch.
func (mr *MockGitCommandClientMockRecorder) SwitchNewBranch(ctx, dirPath, branch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchNewBranch", reflect.TypeOf((*MockGitCommandClient)(nil).SwitchNewBranch), ctx, dirPath, branch)
}
