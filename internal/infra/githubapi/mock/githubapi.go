// Code generated by MockGen. DO NOT EDIT.
// Source: githubapi.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGitHubApiClient is a mock of GitHubApiClient interface.
type MockGitHubApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubApiClientMockRecorder
}

// MockGitHubApiClientMockRecorder is the mock recorder for MockGitHubApiClient.
type MockGitHubApiClientMockRecorder struct {
	mock *MockGitHubApiClient
}

// NewMockGitHubApiClient creates a new mock instance.
func NewMockGitHubApiClient(ctrl *gomock.Controller) *MockGitHubApiClient {
	mock := &MockGitHubApiClient{ctrl: ctrl}
	mock.recorder = &MockGitHubApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubApiClient) EXPECT() *MockGitHubApiClientMockRecorder {
	return m.recorder
}

// CheckPrIsForInfraAndCreatedByRenovate mocks base method.
func (m *MockGitHubApiClient) CheckPrIsForInfraAndCreatedByRenovate(ctx context.Context, org, repo string, prNum int) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPrIsForInfraAndCreatedByRenovate", ctx, org, repo, prNum)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckPrIsForInfraAndCreatedByRenovate indicates an expected call of CheckPrIsForInfraAndCreatedByRenovate.
func (mr *MockGitHubApiClientMockRecorder) CheckPrIsForInfraAndCreatedByRenovate(ctx, org, repo, prNum any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPrIsForInfraAndCreatedByRenovate", reflect.TypeOf((*MockGitHubApiClient)(nil).CheckPrIsForInfraAndCreatedByRenovate), ctx, org, repo, prNum)
}

// CreateIssueComment mocks base method.
func (m *MockGitHubApiClient) CreateIssueComment(ctx context.Context, org, repo string, prNum int, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIssueComment", ctx, org, repo, prNum, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIssueComment indicates an expected call of CreateIssueComment.
func (mr *MockGitHubApiClientMockRecorder) CreateIssueComment(ctx, org, repo, prNum, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssueComment", reflect.TypeOf((*MockGitHubApiClient)(nil).CreateIssueComment), ctx, org, repo, prNum, body)
}

// CreateLabels mocks base method.
func (m *MockGitHubApiClient) CreateLabels(ctx context.Context, org, repo string, prNum int, labels []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLabels", ctx, org, repo, prNum, labels)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLabels indicates an expected call of CreateLabels.
func (mr *MockGitHubApiClientMockRecorder) CreateLabels(ctx, org, repo, prNum, labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLabels", reflect.TypeOf((*MockGitHubApiClient)(nil).CreateLabels), ctx, org, repo, prNum, labels)
}

// CreatePullRequest mocks base method.
func (m *MockGitHubApiClient) CreatePullRequest(ctx context.Context, org, repo, headBranch, baseBranch, title, body string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequest", ctx, org, repo, headBranch, baseBranch, title, body)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePullRequest indicates an expected call of CreatePullRequest.
func (mr *MockGitHubApiClientMockRecorder) CreatePullRequest(ctx, org, repo, headBranch, baseBranch, title, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequest", reflect.TypeOf((*MockGitHubApiClient)(nil).CreatePullRequest), ctx, org, repo, headBranch, baseBranch, title, body)
}

// DeleteBranch mocks base method.
func (m *MockGitHubApiClient) DeleteBranch(ctx context.Context, org, repo, headBranch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBranch", ctx, org, repo, headBranch)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBranch indicates an expected call of DeleteBranch.
func (mr *MockGitHubApiClientMockRecorder) DeleteBranch(ctx, org, repo, headBranch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBranch", reflect.TypeOf((*MockGitHubApiClient)(nil).DeleteBranch), ctx, org, repo, headBranch)
}

// GetPullRequestTitleAndChangedFilepaths mocks base method.
func (m *MockGitHubApiClient) GetPullRequestTitleAndChangedFilepaths(ctx context.Context, org, repo string, prNum int) (string, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestTitleAndChangedFilepaths", ctx, org, repo, prNum)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPullRequestTitleAndChangedFilepaths indicates an expected call of GetPullRequestTitleAndChangedFilepaths.
func (mr *MockGitHubApiClientMockRecorder) GetPullRequestTitleAndChangedFilepaths(ctx, org, repo, prNum any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestTitleAndChangedFilepaths", reflect.TypeOf((*MockGitHubApiClient)(nil).GetPullRequestTitleAndChangedFilepaths), ctx, org, repo, prNum)
}

// HealthCheck mocks base method.
func (m *MockGitHubApiClient) HealthCheck() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockGitHubApiClientMockRecorder) HealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockGitHubApiClient)(nil).HealthCheck))
}

// UpdatePullRequestBody mocks base method.
func (m *MockGitHubApiClient) UpdatePullRequestBody(ctx context.Context, org, repo string, prNum int, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePullRequestBody", ctx, org, repo, prNum, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePullRequestBody indicates an expected call of UpdatePullRequestBody.
func (mr *MockGitHubApiClientMockRecorder) UpdatePullRequestBody(ctx, org, repo, prNum, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullRequestBody", reflect.TypeOf((*MockGitHubApiClient)(nil).UpdatePullRequestBody), ctx, org, repo, prNum, body)
}
